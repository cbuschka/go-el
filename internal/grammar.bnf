int_lit : _digit {_digit} ;

_digit : '0'-'9' ;

string_lit : '"' {.} '"' ;

_letter : 'a'-'z' | 'A'-'Z' ;

_idchar : _letter | _digit | '_' ;

identifier : (_letter | '_') {_idchar} ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;

<<
import (
	"github.com/cbuschka/go-el/internal/ast"
)
>>

Goal
    : Expr                                                          << $0, nil >>
    ;

Expr
	: AndExpr
	;

AndExpr
    : AndExpr "&&" OrExpr                                           << ast.NewAndExpr($0, $2) >>
    | OrExpr                                                        << $0, nil >>
    ;

OrExpr
    : OrExpr "||" RelExpr                                           << ast.NewOrExpr($0, $2) >>
    | RelExpr                                                       << $0, nil >>
    ;

RelExpr
    : RelExpr "==" UnaryExpr                                       << ast.NewEqExpr($0, $2) >>
    | RelExpr "!=" UnaryExpr                                       << ast.NewNeExpr($0, $2) >>
    | RelExpr "<>" UnaryExpr                                       << ast.NewNeExpr($0, $2) >>
    | UnaryExpr                                                    << $0, nil >>
    ;

UnaryExpr
	: "(" Expr ")"  											    << ast.NewGroupExpr($1) >>
    | DerefExpr                                                     << $0, nil >>
	| ConstantExpr                                                  << $0, nil >>
    ;

DerefExpr
    : DerefExpr "." identifier "(" ArgList ")"                      << ast.NewMethodCallExpr($0, $2, $4) >>
    | DerefExpr "." identifier                                      << ast.NewDerefExpr($0, $2) >>
    | FunctionCallExpr                                              << $0, nil >>
    | LookupExpr                                                    << $0, nil >>
    ;

FunctionCallExpr
    : identifier "(" ArgList ")"                                    << ast.NewFunctionCallExpr($0, $2) >>
    ;

ConstantExpr
    : "true"                                                        << ast.NewConstantBoolExpr(true) >>
    | "false"                                                       << ast.NewConstantBoolExpr(false) >>
    | int_lit                                                       << ast.NewConstantIntExpr($0) >>
    | string_lit                                                    << ast.NewConstantStringExpr($0) >>
    ;

ArgList
    : ArgList "," Expr                                              << ast.NewArgList($0, $2) >>
    | Expr                                                          << ast.NewArgList(nil, $0) >>
    | empty                                                         << ast.NewEmptyArgList() >>
    ;

LookupExpr
    : identifier                                                    << ast.NewLookupExpr($0) >>
    ;