// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"github.com/cbuschka/go-expr/internal/ast"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Goal	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Goal : Expr	<< X[0], nil >>`,
		Id:         "Goal",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expr : AndExpr	<<  >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AndExpr : AndExpr "&&" OrExpr	<< ast.NewAndExpr(X[0], X[2]) >>`,
		Id:         "AndExpr",
		NTType:     3,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAndExpr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `AndExpr : OrExpr	<< X[0], nil >>`,
		Id:         "AndExpr",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `OrExpr : OrExpr "||" RelExpr	<< ast.NewOrExpr(X[0], X[2]) >>`,
		Id:         "OrExpr",
		NTType:     4,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewOrExpr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `OrExpr : RelExpr	<< X[0], nil >>`,
		Id:         "OrExpr",
		NTType:     4,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RelExpr : RelExpr "==" UnaryExpr	<< ast.NewEqExpr(X[0], X[2]) >>`,
		Id:         "RelExpr",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEqExpr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `RelExpr : RelExpr "!=" UnaryExpr	<< ast.NewNeExpr(X[0], X[2]) >>`,
		Id:         "RelExpr",
		NTType:     5,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNeExpr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `RelExpr : RelExpr "<>" UnaryExpr	<< ast.NewNeExpr(X[0], X[2]) >>`,
		Id:         "RelExpr",
		NTType:     5,
		Index:      9,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNeExpr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `RelExpr : UnaryExpr	<< X[0], nil >>`,
		Id:         "RelExpr",
		NTType:     5,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `UnaryExpr : "(" Expr ")"	<< ast.NewGroupExpr(X[1]) >>`,
		Id:         "UnaryExpr",
		NTType:     6,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewGroupExpr(X[1])
		},
	},
	ProdTabEntry{
		String: `UnaryExpr : ConstantExpr	<< X[0], nil >>`,
		Id:         "UnaryExpr",
		NTType:     6,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `UnaryExpr : DerefExpr	<< X[0], nil >>`,
		Id:         "UnaryExpr",
		NTType:     6,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConstantExpr : "true"	<< ast.NewConstantBoolExpr(true) >>`,
		Id:         "ConstantExpr",
		NTType:     7,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConstantBoolExpr(true)
		},
	},
	ProdTabEntry{
		String: `ConstantExpr : "false"	<< ast.NewConstantBoolExpr(false) >>`,
		Id:         "ConstantExpr",
		NTType:     7,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConstantBoolExpr(false)
		},
	},
	ProdTabEntry{
		String: `ConstantExpr : int_lit	<< ast.NewConstantIntExpr(X[0]) >>`,
		Id:         "ConstantExpr",
		NTType:     7,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConstantIntExpr(X[0])
		},
	},
	ProdTabEntry{
		String: `ConstantExpr : string_lit	<< ast.NewConstantStringExpr(X[0]) >>`,
		Id:         "ConstantExpr",
		NTType:     7,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConstantStringExpr(X[0])
		},
	},
	ProdTabEntry{
		String: `DerefExpr : DerefExpr "." identifier	<< ast.NewDerefExpr(X[0], X[2]) >>`,
		Id:         "DerefExpr",
		NTType:     8,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDerefExpr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `DerefExpr : LookupExpr	<< X[0], nil >>`,
		Id:         "DerefExpr",
		NTType:     8,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LookupExpr : identifier	<< ast.NewLookupExpr(X[0]) >>`,
		Id:         "LookupExpr",
		NTType:     9,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewLookupExpr(X[0])
		},
	},
}
